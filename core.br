[import lib.stdlib lib]
[import [lib.stdlib add mul sub div gt lt lte gte exit cons symbol pformat dropv count apply]]
[import [naga append conj first last rest get drop assoc mapv partition inc dec second LazySeq some]]
[import [lib.special_forms Set HashMap]]
[import itertools]


[def lazy-seq LazySeq]

[def nil lib/nil]

[def < lt]
[def > gt]
[def <= lte]
[def >= gte]
[def = lib/eq]
[def is? lib/eqq]
[def eq? lib/eqq]

[def != lib/neq]
[def - sub]

[defn type? [x] [py/type x]]

[def empty? lib/empty]

[def false? lib/false_]

[def not lib/not_]

[def list? lib/listp]

[def null? lib/nullp]

[def symbol? lib/symbolp]

[def list lib/list_]

[def list* lib/to_list]

[def bool? lib/boolean]

[def bool py/bool]

[def range py/range]

[def . py/getattr]

[def t true]
[def f false]

[def set Set]

[defn butlast [x] [[. x __getitem__] [py/slice 0 -1]]]

[defn assert
    [[exp res]     [let [msg [pformat 'expecting {}, got {}' exp res]]
                     [assert exp res msg]]]
    [[exp res msg] [if [= exp res]
                       true
                       [begin [print msg] false]]]]


[defn hashmap [[] [py/dict]]
          [[. xs] [py/dict [partition 2 xs]]]]

[defn into [[]    []]
           [[x]   [into [py/list] x]]
           [[a b] [if [empty? b]
                      a
                      [into [conj a [first b]]
                            [rest b]]]]]

[defn print [[x]      [py/print x]]
            [[x . xs] [apply py/print x xs]]]


[defmacro xrange [. args] `[list* [range ,-args]]]

[defmacro apply [f . xs]
          [if [list? [last xs]]
              `[apply ,f ,-[butlast xs] ,-[last xs]]
              `[,f [,-xs]]]]


[defmacro and [[] true]
             [[x]    x]
        [[x . xs]
        `[let [y ,x] [if y [and ,-xs] y]]]]


[defmacro or [[] true]
            [[x]    x]
      [[x .  xs]
       `[let [y ,x] [if y y [or ,-xs]]]]]


[defmacro when [test . body] `[if ,test [begin ,-body]]]

[defmacro cond
          [[a b . clauses]
           `[if ,a
                ,b
                [cond ,-clauses]]]
          [[a] a]
          [[a b]
           `[if ,a ,b]]]

[defmacro case
    [[e] false]
    [[e a] a]
    [[e . clauses] [let [[a b . clauses] clauses]
                     `[if [= ,e ,a]
                          ,b
                          [case ,e ,-clauses]]]]]

[defmacro ->
   [[e . forms] [let [[form . forms] forms
                      [f . body] [if [list? form] form [list form]]]
                      `[-> [,f ,e ,-body] ,-forms]]]
   [[e] e]]

[defmacro ->>
   [[e . forms] [let [[form . forms] forms
                      [f . body] [if [list? form] form [list form]]]
                      `[->> [,f ,-body ,e] ,-forms]]]
   [[e] e]]


[defmacro threadfirst [. exps] `[-> ,-exps]]

[defmacro threadlast [. exps] `[->> ,-exps]]


[defn kw->fn- [exp]
   [let [replace [. exp replace]
         r       [replace '-' '']
         join    [. '' join]]
         [join   [list r '-']]]]




[defmacro pre-for
           [[bindings body]
            [let [bindings [mapv list* [partition 2 bindings]]]
                  `[pre-for [] ,bindings ,body]]]

           [[acc bindings body]
            [if [empty? bindings]
                `/[-> ,body ,-acc]
                [let [[exp . bindings] bindings
                      [f s] exp
                      sx   [set /[-for -when -while -let]]
                      kw?  [sx f]]
                   [if kw?
                       `[pre-for ,[conj acc [list [kw->fn- f] s]] [,-bindings] ,body]
                       `[pre-for ,[conj acc [list /for- [f s]]] [,-bindings] ,-body]]]]]]