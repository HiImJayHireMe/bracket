[import lib.core lib]
[import [lib.core add mul sub div gt lt lte gte exit cons symbol pformat dropv count kwapply in_]]
[import [naga append conj first last rest get drop assoc mapv partition inc dec second LazySeq some update apply]]
[import [naga take interleave]]
[import naga]
[import [lib.special_forms Set HashMap]]
[import operator op]
[import itertools]
[import pickle]
[import [functools reduce]]
[import time]
[import [lib.utils AutoGenSym]]
[import operator op]
[import random]

[py/print 'loading core']

[def symgen [AutoGenSym]]

[defmacro . [[obj attr . args]
             [let [attr [py/str attr]]
                  `[[py/getattr ,obj ,attr] ,-args]]]
            [[obj attr]
             [let [attr [py/str attr]]
                  `[[py/getattr ,obj, attr]]]]]


[defmacro .- [obj attr]
     [let [attr [py/str attr]]
          `[py/getattr ,obj ,attr]]]

[def lazy-seq LazySeq]

[def nil lib/nil]

[def < lt]
[def > gt]
[def <= lte]
[def >= gte]
[def = lib/eq]
[def is? lib/eqq]
[def eq? lib/eqq]

[def != lib/neq]
[def - sub]

[defn type? [x] [py/type x]]

[defn isa? [x types] [py/isinstance x types]]

[def empty? lib/empty]

[def int py/int]
[def float py/float]
[def tuple py/tuple]

[defn int? [x] [isa? x int]]

[defn float? [x] [isa? x float]]

[defn mod [a b] [op/mod a b]]

[defn zero? [x] [= 0 x]]

[defn even? [x] [zero? [mod x 2]]]

[def false? lib/false_]

[def not lib/not_]


[def list? lib/listp]

[def null? lib/nullp]

[def symbol? lib/symbolp]

[def list lib/list_]

[def list* lib/to_list]

[def bool? lib/boolean]

[def bool py/bool]

[defn gensym [[] [symgen 'G__']]
             [[x] [symgen x]]]

[defn range [[]     [itertools/count]]
            [[. xs] [apply py/range xs]]]

[defn subvec [[]                     []]
             [[xs]                   xs]
             [[xs start]            [. xs __getitem__ [py/slice start [count xs]]]]
             [[xs start stop]       [. xs __getitem__ [py/slice start stop]]]
             [[xs start stop step]  [. xs __getitem__ [py/slice start stop step]]]]



[def t true]
[def f false]

[def set Set]

[defn butlast [x] [[.- x __getitem__] [py/slice 0 -1]]]

[defn assert
    [[exp]         [assert t exp]]
    [[exp res]     [let [msg [pformat 'expecting {}, got {}' exp res]]
                     [assert exp res msg]]]
    [[exp res msg] [if [= exp res]
                       true
                       [do [print msg] false]]]]


[defn hashmap [[] [py/dict]]
          [[. xs] [py/dict [partition 2 xs]]]]

[defn into [[]    []]
           [[x]   [into [py/list] x]]
           [[a b] [if [empty? b]
                      a
                      [into [conj a [first b]]
                            [rest b]]]]]

[defmacro xrange [. args] `[list* [range ,-args]]]

[defmacro imply [f . xs]
          [if [list? [last xs]]
              `[imply ,f ,-[butlast xs] ,-[last xs]]
              `[,f [,-xs]]]]

[def print py/print]

[defmacro and [[] true]
             [[x]    x]
        [[x . xs]
        `[let [y ,x] [if y [and ,-xs] y]]]]


[defmacro or [[] true]
            [[x]    x]
      [[x .  xs]
       `[let [y ,x] [if y y [or ,-xs]]]]]


[defmacro when [test . body] `[if ,test [do ,-body]]]

[defmacro cond
          [[a] a]
          [[a b]
           `[if ,a ,b nil]]
          [[a b . clauses]
            [if [= 0 [count clauses]]
                `[cond ,a ,b]
                `[if ,a
                     ,b
                     [cond ,-clauses]]]]]

[defmacro case
    [[e] false]
    [[e a] a]
    [[e . clauses] [let [[a b . clauses] clauses]
                     `[if [= ,e ,a]
                          ,b
                          [case ,e ,-clauses]]]]]

[defmacro ->
   [[e . forms] [let [[form . forms] forms
                      [f . body] [if [list? form] form [list form]]]
                      `[-> [,f ,e ,-body] ,-forms]]]
   [[e] e]]

[defmacro ->>
   [[e . forms] [let [[form . forms] forms
                      [f . body] [if [list? form] form [list form]]]
                      `[->> [,f ,-body ,e] ,-forms]]]
   [[e] e]]



[defmacro as-> [expr name . forms]
   `[let [,name ,expr
          ,-[interleave [repeat name] [butlast forms]]]
       ,[if [empty? forms]
          name
          [last forms]]]]

[defmacro cond-> [expr . clauses]
  [let [g [gensym]
        steps [mapv [fn [[test step]] `[if ,test [-> ,g ,step] ,g]] [partition 2 clauses]]]
    `[let [,g ,expr
          ,-[interleave [repeat g] [butlast steps]]]
        ,[if [empty? steps]
             g
             [last steps]]]]]

[defmacro cond->> [expr . clauses]
  [let [g [gensym]
        steps [mapv [fn [[test step]] `[if ,test [->> ,g ,step] ,g]] [partition 2 clauses]]]
    `[let [,g ,expr
          ,-[interleave [repeat g] [butlast steps]]]
        ,[if [empty? steps]
             g
             [last steps]]]]]

[defmacro some-> [expr . forms]
  [let [g [gensym]
        steps [mapv [fn [step] `[if [nil? ,g] nil [-> ,g ,step]]]
                                forms]]
    `[let [,g ,expr
          ,-[interleave [repeat g] [butlast steps]]]
        ,[if [empty? steps]
             g
             [last steps]]]]]

[defmacro some->> [expr . forms]
  [let [g [gensym]
        steps [mapv [fn [step] `[if [nil? ,g] nil [->> ,g ,step]]]
                                forms]]
    `[let [,g ,expr
          ,-[interleave [repeat g] [butlast steps]]]
        ,[if [empty? steps]
             g
             [last steps]]]]]


[defmacro threadfirst [. exps] `[-> ,-exps]]

[defmacro threadlast [. exps] `[->> ,-exps]]


[defn take-while
      [[pred xs]     [take-while [] pred xs]]
      [[acc pred xs] [cond       [empty? xs]       acc
                                 [pred [first xs]] [take-while [conj acc [first xs]] pred [rest xs]]
                                   acc]]]

[defmacro comment [. body] py/None]

[defn concat [. strs] [. '' join strs]]

[defn s-join [s . ss] [. s join ss]]

[defn take-first [f xs]
      [if [empty? xs]
          nil
          [let [[x . xs] xs]
                [if [f x]
                    x
                    [take-first f xs]]]]]

[defn nil? [x] [or [= x nil] [= x py/None] [= [type? x] [type? py/None]]]]

[defmacro defprotocol [name . opts+sigs]
    [print name opts+sigs]
    [let [[[fname fsigs] . opts+sigs] opts+sigs]
          [print fname fsigs opts+sigs]
          [if [nil? [get *env* [py/str fname]]]
              [let [f `[defn ,fname [,-fsigs] nil]]
                [print f]
                [eval f]]]]]

[defn sort [coll] [py/sorted coll]]

[defn sort-by [[key coll] [kwapply py/sorted coll [hashmap 'key' key]]]
              [[key]      [fn [coll] [sort-by key coll]]]]

[def in? in_]

[defn juxt [. fs] [fn [x] [mapv [fn [f] [f x]] fs]]]


[defmacro timed [form]
   `[let [t [time/time]
          r ,[form]]
      [print [sub [time/time] t]]
      r]]

[defn fnil [f . defaults]
  [defn get-args [acc defaults xs]
     [if [or [empty? defaults]
             [empty? xs]]
         [append acc xs]
         [let [[d . defaults] defaults
               [x . xs]       xs
               acc            [conj acc [or x d]]]
            [get-args acc defaults xs]]]]
  [fn [. xs]
    [let [args [get-args [] defaults xs]]
      [print args]
      [apply f args]]]]


[defn comp
  [[] identity]
  [[f . fs]
   [defn apply-comp
             [[x] [let [a        f
                        [b . xs] [conj fs x]]
                     [apply apply-comp a b xs]]]
             [[a b] [let [f a x b] [f x]]]
             [[a b . xs] [let [f a
                               x [apply apply-comp b xs]]
                               [f x]]]]
   [fn [x] [apply-comp x]]]]

[defn complement [f] [fn [. xs] [not [apply f xs]]]]

[defn constantly [x] [fn [. xs] x]]

[defn identity [x] x]

[defn partial [f . xs] [fn [. args] [apply f [append xs args]]]]

[def map py/map]

[def filter py/filter]

[defn every-pred [. ps]
   [defn all? [[]       t]
              [[x]      [let [v? [take-first false? [reductions [fn [x p] [cond [false? x] f [p x] x -else f]] ps x]]]
                             [if [nil? v?] x f]]]
              [[x xs]   [and [all? x] [apply all? xs]]]
              [[x . xs] [all? x xs]]]
   [fn [. xs] [apply all? xs]]]

[defn every? [p]
  [fn [[]      t]
      [[x] [p x]]
      [[. xs]
        [let [t? [take-first false? [reductions [fn [x a] [cond [false? x] a [p a] a -else f]] xs]]]
                [if [nil? t?]
                    t f]]]]]

[defn some-fn [. ps]
   [fn [. xs] [if [take-first [fn [p] [take-first p xs]] ps] t f]]]



[defn fpartial [f . xs] [fn [. ys] [apply f [append ys xs]]]]

[defn assoc! [m k v] [. m __setitem__ k v] m]

[defn update! [[m k f . xs] [->> k
                           [[fn [x] [. m __getitem__ x]]]
                           [[apply partial f xs]]
                           [[fn [x] [. m __setitem__ k x]]]
                           [[constantly m]]]]
              [[m k f]  [->> k
                           [[fn [x] [. m __getitem__ x]]]
                           f
                           [[fn [x] [. m __setitem__ k x]]]
                           [[constantly m]]]]]


[defn reductions [. xs] [lazy-seq [apply naga/reductions xs]]]

[defn falsey? [x] [if x x f]]

[defn repeat [x] [lazy-seq [itertools/cycle [x]]]]

[def memoize lib/memo]

[defmacro if-let [[bindings then] `[if-let ,bindings ,then nil]]
         [[bindings then else . oldform]
          [let [form [get bindings 0]
                tst  [get bindings 1]
                g    [gensym]]
            `[let [,g ,tst]
              [if ,g
                [let [,form ,g]
                  ,then]
               ,else]]]]]


[defmacro if-some
  [[bindings then] `[if-some ,bindings ,then nil]]
  [[bindings then else . oldform]
    [let [form [get bindings 0]
          tst  [get bindings 1]
          g    [gensym]]
    `[let [,g ,tst]
          [if [nil? ,g]
            ,else
            [let [,form ,g]
               ,then]
               ]]]]]

[defmacro when-let
  [[bindings . body]
   [let [form  [get bindings 0]
         tst   [get bindings 1]
         g     [gensym]]
    `[let [,g ,tst]
       [when ,g
         [let [,form ,g]
           ,-body]]]]]]


[defmacro if-not
  [[test then] `[if-not ,test ,then nil]]
  [[test then else]
   `[if [not ,test] ,then ,else]]]

[defmacro when-not
  [test . body]
    `[if ,test nil [do ,-body]]]

[defn max-key [x key] [kwapply py/max x [hashmap 'key' key]]]

[defn min-key [x key] [kwapply py/min x [hashmap 'key' key]]]

[defn quot [a b] [let [[q] [py/divmod a b]] q]]

[defn rem [a b] [let [[_ r] [py/divmod a b]] r]]

[def mod op/mod]

[def rand random/random]

[defn rand-int
   'produces a random number or something'
   [. xs]
   [apply random/randint xs]]

[def rand-nth random/choice]

[defmacro source [f]
  [.- [get *env* f] source]]

[defmacro doc [f]
  [.- [get *env* f] doc]]

[defn map-indexed [f . args]
   [apply map f [map py/enumerate args]]]

